<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on lwolfs blog</title>
    <link>http://blog.lwolf.org/post/</link>
    <description>Recent content in Posts on lwolfs blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 03 May 2016 13:13:40 +0200</lastBuildDate>
    <atom:link href="http://blog.lwolf.org/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hosting own docker hub with UI and tls</title>
      <link>http://blog.lwolf.org/post/hosting-own-docker-hub/</link>
      <pubDate>Tue, 03 May 2016 13:13:40 +0200</pubDate>
      
      <guid>http://blog.lwolf.org/post/hosting-own-docker-hub/</guid>
      <description>

&lt;p&gt;First thing you need if you&amp;rsquo;re using Kubernetes - docker registry. Because its all about containers.
So in this post I will show how to deploy your own docker registry inside Kubernetes cluster,
with UI and tls, with basic http authentication.
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to use cluster I deployed in previous &lt;a href=&#34;http://blog.lwolf.org/post/move-infrastructure-to-kubernetes/&#34;&gt;post&lt;/a&gt;
As short recap - we have kubernetes cluster with few nodes, and external loadbalancer (ubuntu based machine with nginx)

&lt;figure &gt;
    
        &lt;img src=&#34;http://blog.lwolf.org/img/2016/04/kube-schema-simple.png&#34; alt=&#34;Kubernetes cluster schema&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;h1 id=&#34;get-ssl-certificates-from-letsencrypt:b665c1e3f6ad60358bef128ef9c9ee2f&#34;&gt;Get ssl certificates from letsencrypt&lt;/h1&gt;

&lt;p&gt;To have proper registry opened to web, we need to get ssl certificates.
For this we&amp;rsquo;re going to obtain free ssl certificate from letsencrypt.
In this post I&amp;rsquo;m going to use two domains : &lt;code&gt;example.com&lt;/code&gt; for registry itself and &lt;code&gt;www.example.com&lt;/code&gt; for UI.&lt;/p&gt;

&lt;p&gt;Getting certificates from letsencrypt is described in official &lt;a href=&#34;https://letsencrypt.org/getting-started/&#34;&gt;getting started guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After completing it we shoud have several &lt;code&gt;pem&lt;/code&gt; files, but we need only two of them: &lt;code&gt;fullchain1.pem&lt;/code&gt; and &lt;code&gt;privkey1.pem&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;deploy-docker-registry-to-kubernetes:b665c1e3f6ad60358bef128ef9c9ee2f&#34;&gt;Deploy docker registry to kubernetes&lt;/h1&gt;

&lt;p&gt;Deploying docker registry into kubernetes is easy, because kubernetes provides examples in its own repository.
We are going to use this examples to deploy our registry.
In &lt;a href=&#34;https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/registry&#34;&gt;kubernetes/cluster/addons/registry&lt;/a&gt; we can find different ways of doing this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;plain registry without tls or auth&lt;/li&gt;
&lt;li&gt;registry with lts&lt;/li&gt;
&lt;li&gt;registry with http auth protection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;m going to use registry with tls but with some changes.
We need to create secret with our certificates.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl --namespace=kube-system create secret generic registry-tls-secret --from-file=domain.crt=fullchain1.pem --from-file=domain.key=privkey1.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next step is to create replication controller. Since we want to have some frontend, we need to add another container to the POD - &lt;code&gt;registry-tls-rc.yaml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: v1
kind: ReplicationController
metadata:
  name: kube-registry-v0
  namespace: kube-system
  labels:
    k8s-app: kube-registry
    version: v0
spec:
  replicas: 1
  selector:
    k8s-app: kube-registry
    version: v0
  template:
    metadata:
      labels:
        k8s-app: kube-registry
        version: v0
    spec:
      containers:
      - name: registry
        image: registry:2
        resources:
          # keep request = limit to keep this container in guaranteed class
          limits:
            cpu: 100m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: REGISTRY_HTTP_ADDR
          value: :5000
        - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
          value: /var/lib/registry
        - name: REGISTRY_HTTP_TLS_CERTIFICATE
          value: /certs/domain.crt
        - name: REGISTRY_HTTP_TLS_KEY
          value: /certs/domain.key
        volumeMounts:
        - name: image-store
          mountPath: /var/lib/registry
        - name: cert-dir
          mountPath: /certs
        ports:
        - containerPort: 5000
          name: registry
          protocol: TCP
      - name: registry-ui
        image: konradkleine/docker-registry-frontend:v2
        env:
        - name: ENV_DOCKER_REGISTRY_HOST
          value: &amp;quot;localhost&amp;quot;
        - name: ENV_DOCKER_REGISTRY_PORT
          value: &amp;quot;5000&amp;quot;
        - name: ENV_DOCKER_REGISTRY_USE_SSL
          value: &amp;quot;1&amp;quot;
        ports:
        - containerPort: 80
          name: registry
          protocol: TCP
      volumes:
      - name: image-store
        hostPath:
          path: /data/docker_registry
      - name: cert-dir
        secret:
          secretName: registry-tls-secret
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We added registry-ui container to our POD with needed settings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ENV_DOCKER_REGISTRY_HOST&lt;/code&gt; can be &lt;code&gt;localhost&lt;/code&gt; since we will run it on the same pod as registry&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ENV_DOCKER_REGISTRY_USE_SSL&lt;/code&gt; set to 1 to enable ssl&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ENV_DOCKER_REGISTRY_PORT&lt;/code&gt; actual port of registry&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also we mounted 2 volumes, one with tls secret and one to store actual data on the host.&lt;/p&gt;

&lt;p&gt;And now we need to create Kubernetes Service description &lt;code&gt;registry-tls-svc.yaml&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: v1
kind: Service
metadata:
  name: kube-registry
  namespace: kube-system
  labels:
    k8s-app: kube-registry
    kubernetes.io/name: &amp;quot;KubeRegistry&amp;quot;
spec:
  selector:
    k8s-app: kube-registry
  type: NodePort
  ports:
  - name: registry
    port: 5000
    protocol: TCP
    nodePort: 30299
  - name: registry-ui
    port: 80
    protocol: TCP
    nodePort: 30949
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;re going to use NodePort type of the service to expose the same ports on all nodes.
Configuring ingress controllers and proper loadbalancing is out of scope for this post.&lt;/p&gt;

&lt;p&gt;Lets deploy what we have:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl create -f registry-tls-svc.yaml
kubectl create -f registry-tls-rc.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;configure-nginx:b665c1e3f6ad60358bef128ef9c9ee2f&#34;&gt;Configure nginx&lt;/h1&gt;

&lt;p&gt;At this point we should have registry up and running.
I spent some trying to configure nginx to work with ssl and docker registry.
And then I found awesome &lt;a href=&#34;http://container-solutions.com/running-secured-docker-registry-2-0/&#34;&gt;post&lt;/a&gt; describing it&lt;/p&gt;

&lt;p&gt;Since we want our registry to be accessible only for authorized users we need to create  &lt;code&gt;.htpasswd&lt;/code&gt; file.
For this we can use &lt;code&gt;htpasswd&lt;/code&gt; command, available in ubuntu (my external loadbalancer runs it) after installing &lt;code&gt;apache-utils&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt-get install apache2-utils
mkdir /etc/nginx/registry
cd /etc/nginx/registry
htpasswd -c .htpasswd exampleuser
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also we need to put our ssl certificates to &lt;code&gt;/etc/nginx/ssl/dhub&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After this we can create nginx config with 2 server blocks to serve traffic to our registry and UI&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;upstream registry {
    server NODE1-IP;
    server NODE2-IP;
    server NODE3-IP;
}
server {
    listen 443 ssl;

    server_name example.com;

    add_header Docker-Distribution-Api-Version registry/2.0 always;

    ssl on;
    ssl_certificate /etc/nginx/ssl/dhub/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/dhub/privkey.pem;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Original-URI $request_uri;
    proxy_set_header Docker-Distribution-Api-Version registry/2.0;

    # Allow large uploads
    client_max_body_size 600M;

    location / {
        auth_basic &amp;quot;Restricted&amp;quot;;
        auth_basic_user_file /var/www/dhub/.htpasswd;
        proxy_pass https://registry:30299;
        proxy_read_timeout 900;
    }
    access_log  /var/log/nginx/docker.access.log;
    error_log   /var/log/nginx/docker.error.log;
}

server {
        listen 443 ssl;
        server_name www.example.com;

        ssl on;
        ssl_certificate /etc/nginx/ssl/dhub/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/dhub/privkey.pem;
        location / {
            auth_basic &amp;quot;Restricted&amp;quot;;
            auth_basic_user_file /var/www/dhub/.htpasswd;
            proxy_pass http://registry:30949;
        }
        access_log  /var/log/nginx/docker.access.log;
        error_log   /var/log/nginx/docker.error.log;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can check nginx config for errors before applying changes with &lt;code&gt;nginx -t&lt;/code&gt; and if everything is fine we need to reload it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/etc/init.d/nginx reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thats it. Now you should be able to use your docker registry.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker pull alpine
docker tag alpine:latest example.com/alpine

docker login -u exampleuser -p &amp;quot;YOURPASSWORD&amp;quot; -e your.email@gmail.com example.com
docker push example.com/alpine

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also you should be able to access your registry through frontend on &lt;a href=&#34;https://www.example.com&#34;&gt;https://www.example.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configuring slate tile manager for mac</title>
      <link>http://blog.lwolf.org/post/configuring-slate-tile-manager-for-mac/</link>
      <pubDate>Tue, 19 Apr 2016 16:05:12 +0200</pubDate>
      
      <guid>http://blog.lwolf.org/post/configuring-slate-tile-manager-for-mac/</guid>
      <description></description>
    </item>
    
    <item>
      <title>VK API magic</title>
      <link>http://blog.lwolf.org/post/2014-06-27-vk-api-magic/</link>
      <pubDate>Fri, 27 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.lwolf.org/post/2014-06-27-vk-api-magic/</guid>
      <description>&lt;p&gt;There are lots of posts about magic behaviour of VK API. But yeasterday I faced another one.
I have simple button on my site to share page on VK using &lt;code&gt;Wall.post&lt;/code&gt; of OpenAPI, and yesterday I found out that it stopped working.
After debuging I found error in API response:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Permission to perform this action is denied for non-standalone applications: you should request token using blank.html page.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The magical thing was that this error appears only on one type of pages, while on another everything was fine.&lt;/p&gt;

&lt;p&gt;Nothing I&amp;rsquo;ve found in google helped me.
And the last idea was that is has something with subdomains. I saw this error only on subdomain. I added subdomains to application settings.
Nothing changed.&lt;/p&gt;

&lt;p&gt;After comparing everything of two request/responses the only difference was in &lt;code&gt;#&lt;/code&gt; in in url I was trying to share.
I tried to remove it and&amp;hellip; it works.&lt;/p&gt;

&lt;p&gt;I dont know why VK don&amp;rsquo;t like hashtags in urls and why it returns such a strange response but the fact is - you cant share urls with &lt;code&gt;#&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting epoch date for highcharts from sqlalchemy</title>
      <link>http://blog.lwolf.org/post/2014-06-17-getting-epoch-date-for-highcharts-from-sqlalchemy/</link>
      <pubDate>Tue, 17 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.lwolf.org/post/2014-06-17-getting-epoch-date-for-highcharts-from-sqlalchemy/</guid>
      <description>&lt;p&gt;Short sqlalchemy query to get highcharts ready data from database from datetime field.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;select count(1), extract(epoch from date_trunc(&#39;hour&#39;, created_at)) from bid group by extract(epoch from date_trunc(&#39;hour&#39;, created_at));
    db.session
        .query(
            extract(&#39;epoch&#39;, func.DATE(Bid.created_at)).label(&#39;dt&#39;),
            func.count()
        )
        .filter(Bid.ownership == o)
        .filter(Bid.created_at &amp;gt; days_to_count )
        .group_by(&#39;dt&#39;)
        .order_by(&#39;dt&#39;)
    )
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Obtaining never-expiring access_token to post on Facebook page</title>
      <link>http://blog.lwolf.org/post/2014-06-16-obtaining-never-expiring-access-token-to-post-on-facebook-page/</link>
      <pubDate>Mon, 16 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.lwolf.org/post/2014-06-16-obtaining-never-expiring-access-token-to-post-on-facebook-page/</guid>
      <description>

&lt;p&gt;For one of my projects I needed to post messages to Facebook Fan Page.
After initial search I found out that Facebook has never-expiring token specially for this.
It looks like trivial task and I was really surprised when I didn&amp;rsquo;t find any one-page step-by-step manual to get it.
I decided to write all steps from the beginning, not only part about gettting never-expiring token.&lt;/p&gt;

&lt;h2 id=&#34;proper-permissions:be2fe9f8090e318a51404bb9d1cbedaf&#34;&gt;Proper permissions&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s obvious that to post on Page you need special set of permissions - _publish&lt;em&gt;actions&lt;/em&gt;, _manage&lt;em&gt;pages&lt;/em&gt;.&lt;/br&gt;
You do not need to set these permissions to the whole application in settings, because you need it only for your user (user from whom messages will be posted).
Facebook provides tool for generating access_tokens:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://developers.facebook.com/tools/explorer/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here you should select your application and click &lt;code&gt;Get Access Token&lt;/code&gt;. In popup select at least permissions mentioned above and click &lt;code&gt;Get Access Token&lt;/code&gt;.
Now you have access_token able to post to Page. But it is valid only for 60 minutes. Not good.&lt;/p&gt;

&lt;h2 id=&#34;long-lived-access-token:be2fe9f8090e318a51404bb9d1cbedaf&#34;&gt;Long-lived access_token&lt;/h2&gt;

&lt;p&gt;Getting long-lived access_token is the easiest part. You just need to send your current active &lt;code&gt;short-term access_token&lt;/code&gt;, &lt;code&gt;client_id&lt;/code&gt; and &lt;code&gt;client_secret&lt;/code&gt; to the url:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://graph.facebook.com/oauth/access_token?
    client_id=my_app_id&amp;amp;
    client_secret=my_app_secret&amp;amp;
    grant_type=fb_exchange_token&amp;amp;
    fb_exchange_token=access_token
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;client_id&lt;/code&gt; and &lt;code&gt;client_secret&lt;/code&gt; are in your application settings.&lt;/p&gt;

&lt;p&gt;And you will get response with new access_token and its expiration date in number of seconds.
Now you have good access_token valid for 60 days which you can use everywhere. but you need to extend it from time to time.&lt;/p&gt;

&lt;h2 id=&#34;eternal-token:be2fe9f8090e318a51404bb9d1cbedaf&#34;&gt;Eternal token&lt;/h2&gt;

&lt;p&gt;To get never-expiring token you need to use your long-live token.
All you need is to enter it on:
    &lt;a href=&#34;https://developers.facebook.com/tools/explorer&#34;&gt;https://developers.facebook.com/tools/explorer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And send request to &lt;code&gt;/v2.0/me/accounts&lt;/code&gt;. You should see JSON with all your pages and some basic information about it: ID, Category, Name etc. And among them you will see &lt;code&gt;access_token&lt;/code&gt; for each page. This access_tokens are what we are searching for. They are never-ending.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://blog.lwolf.org/img/2014/06/token.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Access_token&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;get-info-about-token:be2fe9f8090e318a51404bb9d1cbedaf&#34;&gt;Get info about token&lt;/h2&gt;

&lt;p&gt;Facebook has another helpful endpoint to get information about any token, e.g. Expiration-date, app_id, user_id and scopes associated with it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://developers.facebook.com/tools/debug/accesstoken
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you submit our final token here you will see &lt;code&gt;Expires:Never&lt;/code&gt; in response.&lt;/p&gt;

&lt;h2 id=&#34;python-way:be2fe9f8090e318a51404bb9d1cbedaf&#34;&gt;Python way&lt;/h2&gt;

&lt;p&gt;Here is few lines to show how to get it with Python.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Facebook SDK
import facebook

# Init graphAPI with short-lived token
graph = facebook.GraphAPI(short_token)

# Exchange short-lived-token to long-lived
long_token = graph.extend_access_token(client_id, client_secret)

# Init graphAPI with long-lived token
graph = facebook.GraphAPI(long_token[&#39;access_token&#39;])

# Request all pages for user
pages = graph.get_object(&#39;me/accounts&#39;)

for page in pages[&#39;data&#39;]:
    print page
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For each page you will see JSON like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
   &#39;access_token&#39;: never-expiring-page-token,
   &#39;category&#39;: &#39;Product/service&#39;,
   &#39;id&#39;: PAGE_ID,
   &#39;name&#39;: PAGE_NAME,
   &#39;perms&#39;: [
       &#39;ADMINISTER&#39;, 
       &#39;EDIT_PROFILE&#39;,
       &#39;CREATE_CONTENT&#39;,
       &#39;MODERATE_CONTENT&#39;,
       &#39;CREATE_ADS&#39;,
       &#39;BASIC_ADMIN&#39;
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, when I know how to do it, I see that most, if not all, of this could be found on facebook documentation pages.
But, let it be here.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>